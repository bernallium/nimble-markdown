{"version":3,"sources":["nimble-logo.png","themes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","themes","App","useState","markdown","setMarkDown","theme","setTheme","themeOptions","map","i","className","key","class","name","id","aria-label","aria-required","onChange","e","selectedTheme","target","value","src","nimblelogo","height","alt","mode","stat","console","log","highlightActiveLine","wrapEnabled","fontSize","editorProps","$blockScrolling","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","options","strikethrough","underline","tables","emoji","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,yC,kNCa5BC,EAbA,CACb,UACA,SACA,WACA,SACA,WACA,QACA,WACA,iBACA,kBACA,Y,uECuGaC,MA3Ff,WAAgB,IAAD,EACiBC,mBAAS,+NAD1B,mBACRC,EADQ,KACEC,EADF,OAIWF,mBAAS,WAJpB,mBAIRG,EAJQ,KAIDC,EAJC,KAMPC,EAAeP,EAAOQ,KAAI,SAACH,EAAOI,GAAR,OAC9B,4BAAQC,UAAU,eAAeC,IAAKN,GACnCA,MAQL,OACE,yBAAKK,UAAU,OACb,yBAAKA,UAAU,QACb,6BACE,wBAAIA,UAAU,uBAAd,UACA,yDAEF,uBAAGE,MAAM,uBAEX,yBAAKF,UAAU,kDACb,yBAAKA,UAAU,kBACb,+BAAO,uBAAGE,MAAM,yBAChB,4BACEC,KAAK,cACLC,GAAG,cACHC,aAAW,iCACXC,gBAAc,QACdC,SAAU,SAAAC,GAAC,OArBMC,EAqBgBD,EAAEE,OAAOC,WApBlDf,EAASa,GADX,IAA2BA,IAuBhBZ,IAGL,yBAAKG,UAAU,gBACb,yBAAKY,IAAKC,IAAYC,OAAO,KAAKd,UAAU,8BAA8Be,IAAI,KAC9E,0BAAMf,UAAU,sBAAhB,YAGJ,yBAAKA,UAAU,QACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,6BACb,kBAAC,IAAD,CACEA,UAAU,SACVgB,KAAK,WACLrB,MAAOA,EACPY,SAAU,SAACI,EAAOM,GAChBvB,EAAYiB,GACZO,QAAQC,IAAI,WAAYR,EAAOM,IAEjCG,qBAAqB,EACrBC,aAAa,EACbC,SAAU,GAGVX,MAAOlB,EACPU,KAAK,mBACLoB,YAAa,CAAEC,iBAAiB,GAChCC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,KAGpB,kBAAC,IAAD,CACE3B,UAAU,aACVP,SAAUA,EACVmC,QAAS,CACPC,eAAe,EACfC,WAAW,EACXC,QAAQ,EACRC,OAAO,SCpFDC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,c","file":"static/js/main.ed89aae3.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/nimble-logo.3f1ebabd.png\";","const themes = [\n  \"monokai\",\n  \"github\",\n  \"tomorrow\",\n  \"kuroir\",\n  \"twilight\",\n  \"xcode\",\n  \"textmate\",\n  \"solarized_dark\",\n  \"solarized_light\",\n  \"terminal\"\n];\n\nexport default themes;","import React, { useState } from 'react';\nimport nimblelogo from './nimble-logo.png';\nimport AceEditor from \"react-ace\";\nimport MarkdownView from \"react-showdown\";\nimport themes from \"./themes\";\nimport \"ace-builds/src-noconflict/ace\";\nimport \"ace-builds/src-noconflict/mode-markdown\";\nimport \"ace-builds/src-noconflict/theme-github\";\nimport \"ace-builds/src-noconflict/theme-monokai\";\nimport \"ace-builds/src-noconflict/theme-tomorrow\";\nimport \"ace-builds/src-noconflict/theme-kuroir\";\nimport \"ace-builds/src-noconflict/theme-twilight\";\nimport \"ace-builds/src-noconflict/theme-xcode\";\nimport \"ace-builds/src-noconflict/theme-textmate\";\nimport \"ace-builds/src-noconflict/theme-solarized_dark\";\nimport \"ace-builds/src-noconflict/theme-solarized_light\";\nimport \"ace-builds/src-noconflict/theme-terminal\";\n\nfunction onChange(newValue) {\n  console.log(\"change\", newValue);\n}\n\nfunction App() {\n  let [markdown, setMarkDown] = useState(`### Hello! :wave:\\n\\nThanks for visiting **nimble** :rabbit:\n  \\n\\nEdit me and get a live preview of the markdown output thanks to the power of React! :sunglasses:\n  \\n\\nTry changing the theme of the editor too! :art:`);\n  let [theme, setTheme] = useState('monokai');\n\n  const themeOptions = themes.map((theme, i) => (\n    <option className=\"theme-option\" key={theme}>\n      {theme}\n    </option>\n  ));\n\n  function updateEditorTheme(selectedTheme) {\n    setTheme(selectedTheme);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className='page'>\n        <div>\n          <h1 className='landing-page-header'>nimble</h1>\n          <h2>A simple markdown editor</h2>\n        </div>\n        <i class=\"fas fa-arrow-down\"></i>\n      </div>\n      <nav className='navbar navbar-expand-lg navbar-light fixed-top'>\n        <div className=\"theme-selector\">\n          <label><i class=\"fas fa-paint-roller\"></i></label>\n          <select\n            name=\"theme-names\"\n            id=\"theme-names\"\n            aria-label=\"Select a theme for your editor\"\n            aria-required=\"false\"\n            onChange={e => updateEditorTheme(e.target.value)}\n          >\n            {themeOptions}\n          </select>\n        </div>\n        <div className=\"navbar-brand\">\n          <img src={nimblelogo} height=\"30\" className=\"d-inline-block align-center\" alt=\"\" />\n          <span className='navbar-brand-title'>nimble</span>\n        </div>\n      </nav>\n      <div className=\"page\">\n        <div className=\"editor-and-panel\">\n          <div className=\"theme-selector-and-editor\">\n            <AceEditor\n              className=\"editor\"\n              mode=\"markdown\"\n              theme={theme}\n              onChange={(value, stat) => {\n                setMarkDown(value);\n                console.log(\"onChange\", value, stat);\n              }}\n              highlightActiveLine={true}\n              wrapEnabled={true}\n              fontSize={14}\n              // width={\"700px\"}\n              // height={\"600px\"}\n              value={markdown}\n              name=\"UNIQUE_ID_OF_DIV\"\n              editorProps={{ $blockScrolling: true }}\n              enableBasicAutocompletion={true}\n              enableLiveAutocompletion={true}\n              enableSnippets={true}\n            />\n          </div>\n          <MarkdownView\n            className=\"view-panel\"\n            markdown={markdown}\n            options={{\n              strikethrough: true,\n              underline: true,\n              tables: true,\n              emoji: true,\n            }}\n          />\n        </div>\n        {/* <footer>\n          Made with React,{\" \"}\n          <a href=\"https://github.com/securingsincity/react-ace\">react-ace</a>,\n          and{\" \"}\n          <a href=\"https://github.com/jerolimov/react-showdown\">\n            react-showdown\n          </a>\n        </footer> */}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}